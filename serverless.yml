service: dynamodb-stream-example
frameworkVersion: '2'
useDotenv: true

plugins:
  - serverless-dotenv-plugin

custom:
  streamArn: ${env:STREAM_ARN}
  accountId: ${env:ACCOUNT_ID}

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iam:
    role:
      statements:  # IAM role statements so that services can be accessed in the AWS account
        - Effect: Allow
          Action:
            - 'logs:*'
            - 'events:*'
          Resource:
            - 'arn:aws:logs:*:*:*'
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListShards
            - dynamodb:ListStreams
          Resource:
            - 'arn:aws:dynamodb:*:${self:custom.accountId}:table/*'
            - 'arn:aws:dynamodb:*:${self:custom.accountId}:table/*/index/*'
# you can define service wide environment variables here
#  environment:
#    variable1: value1
package:
  patterns:
    - '!test/**'

functions:
  hello:
    handler: src/index.handler
    events:
      - stream: ${self:custom.streamArn}
