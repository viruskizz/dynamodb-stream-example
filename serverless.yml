service: dynamodb-stream-example
frameworkVersion: '2'
useDotenv: true

plugins:
  - serverless-dotenv-plugin

custom:
  streamArn: ${env:STREAM_ARN}
  accountId: ${env:ACCOUNT_ID}

provider:
  name: aws
  #  stage: dev
  #  region: us-east-1
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  memorySize: 2048 # Overwrite the default memory size. Default is 1024
  timeout: 60 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds

  iam:
    role:
      statements:  # IAM role statements so that services can be accessed in the AWS account
        - Effect: Allow
          Action:
            - 'logs:*'
          Resource:
            - 'arn:aws:logs:*:*:*'
        - Effect: Allow
          Action: # Gives permission to DynamoDB tables in a specific region
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListShards
            - dynamodb:ListStreams
          Resource:
            - 'arn:aws:dynamodb:*: ${env:ACCOUNT_ID}:table/*'
            - 'arn:aws:dynamodb:*:${env:ACCOUNT_ID}:table/*/index/*'

package:
  patterns:
    - '!test/**'

functions:
  stream:
    handler: src/index.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [ paymentTable, StreamArn ]

resources: # CloudFormation template syntax
  Resources:
    paymentTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:PAYMENT_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    logTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:LOGGING_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
    reportTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:REPORT_TABLE}
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 2
  # The "Outputs" that your AWS CloudFormation Stack should produce.  This allows references between services.
  Outputs:
    PaymentStreamArn:
      Description: The Stream ARN for the Payment's Table
      Value:
        'Fn::GetAtt': [ paymentTable, StreamArn ]
      Export:
        Name: ${self:service}:${opt:stage}:PaymmentStreamArn # see Fn::ImportValue to use in other services and http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html for documentation on use.
